var _=Object.defineProperty;var L=(o,n,t)=>n in o?_(o,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[n]=t;var B=(o,n,t)=>(L(o,typeof n!="symbol"?n+"":n,t),t);import{r as I,a as H,R as $}from"./react-H14vcryl.js";import{P as x}from"./phaser-pQREW5IE.js";(function(){const n=document.createElement("link").relList;if(n&&n.supports&&n.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))r(e);new MutationObserver(e=>{for(const i of e)if(i.type==="childList")for(const s of i.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&r(s)}).observe(document,{childList:!0,subtree:!0});function t(e){const i={};return e.integrity&&(i.integrity=e.integrity),e.referrerPolicy&&(i.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?i.credentials="include":e.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function r(e){if(e.ep)return;e.ep=!0;const i=t(e);fetch(e.href,i)}})();var O={exports:{}},C={};/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var N=I,j=Symbol.for("react.element"),M=Symbol.for("react.fragment"),W=Object.prototype.hasOwnProperty,U=N.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,K={key:!0,ref:!0,__self:!0,__source:!0};function v(o,n,t){var r,e={},i=null,s=null;t!==void 0&&(i=""+t),n.key!==void 0&&(i=""+n.key),n.ref!==void 0&&(s=n.ref);for(r in n)W.call(n,r)&&!K.hasOwnProperty(r)&&(e[r]=n[r]);if(o&&o.defaultProps)for(r in n=o.defaultProps,n)e[r]===void 0&&(e[r]=n[r]);return{$$typeof:j,type:o,key:i,ref:s,props:e,_owner:U.current}}C.Fragment=M;C.jsx=v;C.jsxs=v;O.exports=C;var A=O.exports,R={},b=H;R.createRoot=b.createRoot,R.hydrateRoot=b.hydrateRoot;const l=new(window.AudioContext||window.webkitAudioContext);function J(){const o=l.sampleRate*.05,n=l.createBuffer(1,o,l.sampleRate),t=n.getChannelData(0);for(let d=0;d<o;d++)t[d]=Math.random()*2-1;const r=l.createBufferSource();r.buffer=n;const e=l.createBiquadFilter();e.type="highpass",e.frequency.setValueAtTime(8e3,l.currentTime),e.Q.setValueAtTime(1,l.currentTime);const i=l.createGain();i.gain.setValueAtTime(1,l.currentTime),i.gain.exponentialRampToValueAtTime(.001,l.currentTime+.05),r.connect(e),e.connect(i),i.connect(l.destination),r.start(),r.stop(l.currentTime+.05);const s=l.createOscillator();s.type="square",s.frequency.setValueAtTime(1e4,l.currentTime);const a=l.createGain();a.gain.setValueAtTime(.1,l.currentTime),a.gain.exponentialRampToValueAtTime(.001,l.currentTime+.03),s.connect(a),a.connect(l.destination),s.start(),s.stop(l.currentTime+.03)}const u=new(window.AudioContext||window.webkitAudioContext);function Q(){const o=u.sampleRate*.2,n=u.createBuffer(1,o,u.sampleRate),t=n.getChannelData(0);for(let d=0;d<o;d++)t[d]=Math.random()*2-1;const r=u.createBufferSource();r.buffer=n;const e=u.createBiquadFilter();e.type="highpass",e.frequency.setValueAtTime(1e3,u.currentTime);const i=u.createGain();i.gain.setValueAtTime(1,u.currentTime),i.gain.exponentialRampToValueAtTime(.01,u.currentTime+.2),r.connect(e),e.connect(i),i.connect(u.destination),r.start(),r.stop(u.currentTime+.2);const s=u.createOscillator();s.type="sine",s.frequency.setValueAtTime(150,u.currentTime);const a=u.createGain();a.gain.setValueAtTime(.7,u.currentTime),a.gain.exponentialRampToValueAtTime(.01,u.currentTime+.1),s.connect(a),a.connect(u.destination),s.start(),s.stop(u.currentTime+.1)}const Y=()=>{const o=window.AudioContext||window.webkitAudioContext;return new o};function Z(){const o=Y(),n=o.createOscillator();n.type="sine";const t=o.createGain();n.frequency.setValueAtTime(200,o.currentTime),n.frequency.exponentialRampToValueAtTime(70,o.currentTime+.05),t.gain.setValueAtTime(1,o.currentTime),t.gain.exponentialRampToValueAtTime(.001,o.currentTime+1),n.connect(t),t.connect(o.destination),n.start(),n.stop(o.currentTime+1.5)}const c=new(window.AudioContext||window.webkitAudioContext);function X(){const o=c.sampleRate*1.5,n=c.createBuffer(1,o,c.sampleRate),t=n.getChannelData(0);for(let h=0;h<o;h++)t[h]=Math.random()*2-1;const r=c.createBufferSource();r.buffer=n;const e=c.createBiquadFilter();e.type="highpass",e.frequency.setValueAtTime(4e3,c.currentTime);const i=c.createBiquadFilter();i.type="lowpass",i.frequency.setValueAtTime(12e3,c.currentTime);const s=c.createGain();s.gain.setValueAtTime(1,c.currentTime),s.gain.exponentialRampToValueAtTime(.001,c.currentTime+1.5),r.connect(e),e.connect(i),i.connect(s),s.connect(c.destination),r.start(),r.stop(c.currentTime+1.5);const a=c.createOscillator();a.type="triangle",a.frequency.setValueAtTime(1e4,c.currentTime);const d=c.createGain();d.gain.setValueAtTime(.05,c.currentTime),d.gain.exponentialRampToValueAtTime(.001,c.currentTime+1.5),a.connect(d),d.connect(c.destination),a.start(),a.stop(c.currentTime+1.5)}const g=o=>x.Display.Color.HexStringToColor(o).color,p=new(window.AudioContext||window.webkitAudioContext);function ee(){const o=p.sampleRate*.5,n=p.createBuffer(1,o,p.sampleRate),t=n.getChannelData(0);for(let a=0;a<o;a++)t[a]=Math.random()*2-1;const r=p.createBufferSource();r.buffer=n;const e=p.createBiquadFilter();e.type="highpass",e.frequency.setValueAtTime(5e3,p.currentTime);const i=p.createBiquadFilter();i.type="lowpass",i.frequency.setValueAtTime(1e4,p.currentTime);const s=p.createGain();s.gain.setValueAtTime(.6,p.currentTime),s.gain.exponentialRampToValueAtTime(.001,p.currentTime+.5),r.connect(e),e.connect(i),i.connect(s),s.connect(p.destination),r.start(),r.stop(p.currentTime+.5)}const m=new(window.AudioContext||window.webkitAudioContext);function te(){const o=m.sampleRate*1.2,n=m.createBuffer(1,o,m.sampleRate),t=n.getChannelData(0);for(let a=0;a<o;a++)t[a]=Math.random()*2-1;const r=m.createBufferSource();r.buffer=n;const e=m.createBiquadFilter();e.type="highpass",e.frequency.setValueAtTime(3e3,m.currentTime);const i=m.createBiquadFilter();i.type="lowpass",i.frequency.setValueAtTime(9e3,m.currentTime);const s=m.createGain();s.gain.setValueAtTime(.8,m.currentTime),s.gain.exponentialRampToValueAtTime(.001,m.currentTime+1.2),r.connect(e),e.connect(i),i.connect(s),s.connect(m.destination),r.start(),r.stop(m.currentTime+1.2)}const f=new(window.AudioContext||window.webkitAudioContext);function k(o=99,n=500){const t=f.createOscillator();t.type="sine",t.frequency.setValueAtTime(o,f.currentTime);const r=f.createGain();r.gain.setValueAtTime(1,f.currentTime),r.gain.exponentialRampToValueAtTime(.001,f.currentTime+.5),t.detune.setValueAtTime(-5,f.currentTime),t.connect(r),r.connect(f.destination),t.start(),t.stop(f.currentTime+n/1e3)}function ne(){k(120,400)}let S=!1,V=0,y=[],w=0,P=null;function oe(){S=!0,V=Date.now(),y=[],console.log("Recording started")}function F(){S=!1,y.push({instrument:null,time:Date.now()-V}),console.log("Recording stopped")}function ie(){const o=()=>{w>=y.length&&(w=0);const{instrument:n,time:t}=y[w],r=w===0?0:y[w-1].time;P=setTimeout(()=>{console.log(`Playing ${n} after ${t}ms`),n&&D(n),w++,o()},t-r)};console.log("Loop play starting"),o()}function re(){P&&clearTimeout(P),console.log("Loop stopped")}const se={hihat:J,kick:Z,snare:Q,crash:X,"hihat-open":ee,ride:te,"tom-low":k,"tom-high":ne},D=o=>{if(console.log(`Playing ${o}`),se[o](),S){const n=Date.now()-V;y.push({instrument:o,time:n}),console.log(`Recording ${o} at time ${n}ms`)}},ae={hihat:"#FDA341",kick:"#F24E1E",snare:"#4A90E2",crash:"#A0D8C5","hihat-open":"#F9F871",ride:"#F5C542","tom-low":"#FF7F50","tom-high":"#9B59B6"},q={idle:"#FFF",readyToRecord:"#0FF",recording:"#FD0041",playing:"#0F0"};class ce extends x.Scene{constructor(){super(...arguments);B(this,"controls")}create(){this.createPads(),this.createControlButtons()}createPads(){const t=[this.createPad("crash"),this.createPad("ride"),this.createPad("hihat-open"),this.createPad("hihat"),this.createPad("snare"),this.createPad("tom-low"),this.createPad("tom-high"),this.createPad("kick")];t.forEach(({button:e,instrument:i})=>e.setInteractive().setOrigin(0,0).on("pointerdown",()=>{e.setAlpha(.7),this.controls.state==="readyToRecord"&&(this.controls.state="recording",this.updateControlsText(),oe()),D(i)}).on("pointerup",()=>e.setAlpha(1)).on("pointerout",()=>e.setAlpha(1)));const r=()=>{const e=window.innerWidth/4,i=window.innerHeight/2;t.forEach(({button:s},a)=>{const d=a%4*e,h=Math.floor(a/4)*i;s.setSize(e,i).setPosition(d,h)})};window.addEventListener("resize",r),r()}createPad(t){return{instrument:t,button:this.add.rectangle().setFillStyle(g(ae[t])).setStrokeStyle(2,g("#FFF"),.8)}}createButton(){const t=this.add.rectangle().setFillStyle(g("#000")).setStrokeStyle(2,g("#FFF"),.8).setOrigin(0,0);return t.setInteractive().on("pointerdown",()=>t.setFillStyle(g("#666"))).on("pointerup",()=>t.setFillStyle(g("#000"))),t}createText(t){return this.add.text(0,0,t).setOrigin(.5,.5).setFontSize(20).setFontFamily("Arial").setAlign("center").setColor("#FFF").setData("initial",t)}createControlButtons(){this.controls={state:"idle",stop:{button:this.createButton(),text:this.createText("Stop")},record:{button:this.createButton(),text:this.createText("Record")},play:{button:this.createButton(),text:this.createText("Play")}};const{record:t,stop:r,play:e}=this.controls;t.button.setInteractive().on("pointerdown",()=>{this.controls.state==="idle"||this.controls.state==="playing"?(this.controls.state="readyToRecord",t.text.setText("Hit a pad to start")):this.controls.state==="readyToRecord"?(this.controls.state="idle",t.text.setText(t.text.getData("initial"))):this.controls.state==="recording"&&(this.controls.state="idle",F()),this.updateControlsText()}),r.button.setInteractive().on("pointerdown",()=>{this.controls.state==="recording"&&F(),this.controls.state==="playing"&&re(),this.controls.state="idle",this.updateControlsText()}),e.button.setInteractive().on("pointerdown",()=>{this.controls.state==="recording"&&F(),this.controls.state="playing",ie(),this.updateControlsText()});const i=()=>{const s=window.innerWidth,a=window.innerHeight,d=Math.max(a,s)/15,h=s/3;[r,t,e].forEach(({button:T,text:G},z)=>{T.setSize(h,d).setPosition(h*z,-1),G.setFontSize(d/3).setWordWrapWidth(T.width,!0).setSize(T.width,T.height).setPosition(T.getCenter().x,T.getCenter().y)})};window.addEventListener("resize",i),i()}updateControlsText(){const{record:{text:t},stop:{text:r},play:{text:e}}=this.controls;[t,r,e].forEach(s=>s.setText(s.getData("initial")).setColor(q.idle));const i=q[this.controls.state];switch(this.controls.state){case"idle":break;case"readyToRecord":t.setText("Hit a pad to start").setColor(i);break;case"recording":t.setText("Recording...").setColor(i);break;case"playing":e.setText("Playing...").setColor(i);break}}}function le(o){const n=window.innerWidth,t=window.innerHeight;o.scale.resize(n,t),o.scene.scenes.forEach(r=>{var e,i;return(i=(e=r.sys)==null?void 0:e.scale)==null?void 0:i.refresh()})}let E=!1;const ue=()=>{if(!E){E=!0;const o=new x.Game({type:x.AUTO,mode:x.Scale.RESIZE,parent:"phaser-container",width:window.innerWidth,height:window.innerHeight,backgroundColor:"#FFF",scene:[ce],input:{activePointers:4}});window.addEventListener("resize",()=>{le(o)})}return A.jsx(A.Fragment,{})};function de(){return A.jsx(ue,{})}R.createRoot(document.getElementById("root")).render(A.jsx($.StrictMode,{children:A.jsx(de,{})}));
