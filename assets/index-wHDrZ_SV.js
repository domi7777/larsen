var _=Object.defineProperty;var q=(i,n,o)=>n in i?_(i,n,{enumerable:!0,configurable:!0,writable:!0,value:o}):i[n]=o;var P=(i,n,o)=>(q(i,typeof n!="symbol"?n+"":n,o),o);import{r as D,a as G,R as L}from"./react-H14vcryl.js";import{P as y}from"./phaser-pQREW5IE.js";(function(){const n=document.createElement("link").relList;if(n&&n.supports&&n.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))r(e);new MutationObserver(e=>{for(const t of e)if(t.type==="childList")for(const s of t.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&r(s)}).observe(document,{childList:!0,subtree:!0});function o(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?t.credentials="include":e.crossOrigin==="anonymous"?t.credentials="omit":t.credentials="same-origin",t}function r(e){if(e.ep)return;e.ep=!0;const t=o(e);fetch(e.href,t)}})();var E={exports:{}},x={};/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var I=D,$=Symbol.for("react.element"),H=Symbol.for("react.fragment"),j=Object.prototype.hasOwnProperty,W=I.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,N={key:!0,ref:!0,__self:!0,__source:!0};function k(i,n,o){var r,e={},t=null,s=null;o!==void 0&&(t=""+o),n.key!==void 0&&(t=""+n.key),n.ref!==void 0&&(s=n.ref);for(r in n)j.call(n,r)&&!N.hasOwnProperty(r)&&(e[r]=n[r]);if(i&&i.defaultProps)for(r in n=i.defaultProps,n)e[r]===void 0&&(e[r]=n[r]);return{$$typeof:$,type:i,key:t,ref:s,props:e,_owner:W.current}}x.Fragment=H;x.jsx=k;x.jsxs=k;E.exports=x;var w=E.exports,R={},b=G;R.createRoot=b.createRoot,R.hydrateRoot=b.hydrateRoot;const c=new(window.AudioContext||window.webkitAudioContext);function M(){const i=c.sampleRate*.05,n=c.createBuffer(1,i,c.sampleRate),o=n.getChannelData(0);for(let d=0;d<i;d++)o[d]=Math.random()*2-1;const r=c.createBufferSource();r.buffer=n;const e=c.createBiquadFilter();e.type="highpass",e.frequency.setValueAtTime(8e3,c.currentTime),e.Q.setValueAtTime(1,c.currentTime);const t=c.createGain();t.gain.setValueAtTime(1,c.currentTime),t.gain.exponentialRampToValueAtTime(.001,c.currentTime+.05),r.connect(e),e.connect(t),t.connect(c.destination),r.start(),r.stop(c.currentTime+.05);const s=c.createOscillator();s.type="square",s.frequency.setValueAtTime(1e4,c.currentTime);const u=c.createGain();u.gain.setValueAtTime(.1,c.currentTime),u.gain.exponentialRampToValueAtTime(.001,c.currentTime+.03),s.connect(u),u.connect(c.destination),s.start(),s.stop(c.currentTime+.03)}const l=new(window.AudioContext||window.webkitAudioContext);function K(){const i=l.sampleRate*.2,n=l.createBuffer(1,i,l.sampleRate),o=n.getChannelData(0);for(let d=0;d<i;d++)o[d]=Math.random()*2-1;const r=l.createBufferSource();r.buffer=n;const e=l.createBiquadFilter();e.type="highpass",e.frequency.setValueAtTime(1e3,l.currentTime);const t=l.createGain();t.gain.setValueAtTime(1,l.currentTime),t.gain.exponentialRampToValueAtTime(.01,l.currentTime+.2),r.connect(e),e.connect(t),t.connect(l.destination),r.start(),r.stop(l.currentTime+.2);const s=l.createOscillator();s.type="sine",s.frequency.setValueAtTime(150,l.currentTime);const u=l.createGain();u.gain.setValueAtTime(.7,l.currentTime),u.gain.exponentialRampToValueAtTime(.01,l.currentTime+.1),s.connect(u),u.connect(l.destination),s.start(),s.stop(l.currentTime+.1)}const p=new(window.AudioContext||window.webkitAudioContext);function U(){const i=p.createOscillator();i.type="sine";const n=p.createGain();i.frequency.setValueAtTime(150,p.currentTime),i.frequency.exponentialRampToValueAtTime(60,p.currentTime+.1),n.gain.setValueAtTime(1,p.currentTime),n.gain.exponentialRampToValueAtTime(.001,p.currentTime+.5),i.connect(n),n.connect(p.destination),i.start(),i.stop(p.currentTime+.5)}const a=new(window.AudioContext||window.webkitAudioContext);function J(){const i=a.sampleRate*1.5,n=a.createBuffer(1,i,a.sampleRate),o=n.getChannelData(0);for(let h=0;h<i;h++)o[h]=Math.random()*2-1;const r=a.createBufferSource();r.buffer=n;const e=a.createBiquadFilter();e.type="highpass",e.frequency.setValueAtTime(4e3,a.currentTime);const t=a.createBiquadFilter();t.type="lowpass",t.frequency.setValueAtTime(12e3,a.currentTime);const s=a.createGain();s.gain.setValueAtTime(1,a.currentTime),s.gain.exponentialRampToValueAtTime(.001,a.currentTime+1.5),r.connect(e),e.connect(t),t.connect(s),s.connect(a.destination),r.start(),r.stop(a.currentTime+1.5);const u=a.createOscillator();u.type="triangle",u.frequency.setValueAtTime(1e4,a.currentTime);const d=a.createGain();d.gain.setValueAtTime(.05,a.currentTime),d.gain.exponentialRampToValueAtTime(.001,a.currentTime+1.5),u.connect(d),d.connect(a.destination),u.start(),u.stop(a.currentTime+1.5)}const f=i=>y.Display.Color.HexStringToColor(i).color;let F=!1,S=0,g=[],T=0,C=null;function Q(){F=!0,S=Date.now(),g=[],console.log("Recording started")}function A(){F=!1,g.push({instrument:null,time:Date.now()-S}),console.log("Recording stopped")}function Y(){const i=()=>{T>=g.length&&(T=0);const{instrument:n,time:o}=g[T],r=T===0?0:g[T-1].time;C=setTimeout(()=>{console.log(`Playing ${n} after ${o}ms`),n&&O(n),T++,i()},o-r)};console.log("Loop play starting"),i()}function Z(){C&&clearTimeout(C),console.log("Loop stopped")}const O=i=>{switch(console.log(`Playing ${i}`),i){case"hihat":M();break;case"snare":K();break;case"kick":U();break;case"crash":J();break}if(F){const n=Date.now()-S;g.push({instrument:i,time:n}),console.log(`Recording ${i} at time ${n}ms`)}},X={hihat:"#FDA341",kick:"#F24E1E",snare:"#4A90E2",crash:"#A0D8C5"},V={idle:"#FFF",readyToRecord:"#0FF",recording:"#FD0041",playing:"#0F0"};class ee extends y.Scene{constructor(){super(...arguments);P(this,"controls")}create(){this.createPads(),this.createControlButtons()}createPads(){const o=[this.createPad("hihat"),this.createPad("kick"),this.createPad("snare"),this.createPad("crash")];o.forEach(({button:e,instrument:t})=>e.setInteractive().setOrigin(0,0).on("pointerdown",()=>{e.setAlpha(.7),this.controls.state==="readyToRecord"&&(this.controls.state="recording",this.updateControlsText(),Q()),O(t)}).on("pointerup",()=>e.setAlpha(1)).on("pointerout",()=>e.setAlpha(1)));const r=()=>{const e=window.innerWidth,t=window.innerHeight;o[0].button.setSize(e/2,t/2).setPosition(0,0),o[1].button.setSize(e/2,t/2).setPosition(e/2,0),o[2].button.setSize(e/2,t/2).setPosition(0,t/2),o[3].button.setSize(e/2,t/2).setPosition(e/2,t/2)};window.addEventListener("resize",r),r()}createPad(o){return{instrument:o,button:this.add.rectangle().setFillStyle(f(X[o])).setStrokeStyle(2,f("#FFF"),.8)}}createButton(){const o=this.add.rectangle().setFillStyle(f("#000")).setStrokeStyle(2,f("#FFF"),.8).setOrigin(0,0);return o.setInteractive().on("pointerdown",()=>o.setFillStyle(f("#666"))).on("pointerup",()=>o.setFillStyle(f("#000"))),o}createText(o){return this.add.text(0,0,o).setOrigin(.5,.5).setFontSize(20).setFontFamily("Arial").setAlign("center").setColor("#FFF").setData("initial",o)}createControlButtons(){this.controls={state:"idle",stop:{button:this.createButton(),text:this.createText("Stop")},record:{button:this.createButton(),text:this.createText("Record")},play:{button:this.createButton(),text:this.createText("Play")}};const{record:o,stop:r,play:e}=this.controls;o.button.setInteractive().on("pointerdown",()=>{this.controls.state==="idle"||this.controls.state==="playing"?(this.controls.state="readyToRecord",o.text.setText("Hit a pad to start")):this.controls.state==="readyToRecord"?(this.controls.state="idle",o.text.setText(o.text.getData("initial"))):this.controls.state==="recording"&&(this.controls.state="idle",A()),this.updateControlsText()}),r.button.setInteractive().on("pointerdown",()=>{this.controls.state==="recording"&&A(),this.controls.state==="playing"&&Z(),this.controls.state="idle",this.updateControlsText()}),e.button.setInteractive().on("pointerdown",()=>{this.controls.state==="recording"&&A(),this.controls.state="playing",Y(),this.updateControlsText()});const t=()=>{const s=window.innerWidth,u=window.innerHeight,d=Math.max(u,s)/15,h=s/3;[r,o,e].forEach(({button:m,text:B},z)=>{m.setSize(h,d).setPosition(h*z,-1),B.setFontSize(d/3).setWordWrapWidth(m.width,!0).setSize(m.width,m.height).setPosition(m.getCenter().x,m.getCenter().y)})};window.addEventListener("resize",t),t()}updateControlsText(){const{record:{text:o},stop:{text:r},play:{text:e}}=this.controls;[o,r,e].forEach(s=>s.setText(s.getData("initial")).setColor(V.idle));const t=V[this.controls.state];switch(this.controls.state){case"idle":break;case"readyToRecord":o.setText("Hit a pad to start").setColor(t);break;case"recording":o.setText("Recording...").setColor(t);break;case"playing":e.setText("Playing...").setColor(t);break}}}function te(i){const n=window.innerWidth,o=window.innerHeight;i.scale.resize(n,o),i.scene.scenes.forEach(r=>{var e,t;return(t=(e=r.sys)==null?void 0:e.scale)==null?void 0:t.refresh()})}let v=!1;const oe=()=>{if(!v){v=!0;const i=new y.Game({type:y.AUTO,mode:y.Scale.RESIZE,parent:"phaser-container",width:window.innerWidth,height:window.innerHeight,backgroundColor:"#FFF",scene:[ee],input:{activePointers:4}});window.addEventListener("resize",()=>{te(i)})}return w.jsx(w.Fragment,{})};function ne(){return w.jsx(oe,{})}R.createRoot(document.getElementById("root")).render(w.jsx(L.StrictMode,{children:w.jsx(ne,{})}));
