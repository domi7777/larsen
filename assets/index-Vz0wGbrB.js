var L=Object.defineProperty;var I=(r,o,t)=>o in r?L(r,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[o]=t;var b=(r,o,t)=>(I(r,typeof o!="symbol"?o+"":o,t),t);import{r as $,a as H,R as N}from"./react-H14vcryl.js";import{P as A}from"./phaser-pQREW5IE.js";(function(){const o=document.createElement("link").relList;if(o&&o.supports&&o.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))i(e);new MutationObserver(e=>{for(const n of e)if(n.type==="childList")for(const s of n.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&i(s)}).observe(document,{childList:!0,subtree:!0});function t(e){const n={};return e.integrity&&(n.integrity=e.integrity),e.referrerPolicy&&(n.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?n.credentials="include":e.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function i(e){if(e.ep)return;e.ep=!0;const n=t(e);fetch(e.href,n)}})();var v={exports:{}},C={};/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var j=$,M=Symbol.for("react.element"),W=Symbol.for("react.fragment"),K=Object.prototype.hasOwnProperty,U=j.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,J={key:!0,ref:!0,__self:!0,__source:!0};function k(r,o,t){var i,e={},n=null,s=null;t!==void 0&&(n=""+t),o.key!==void 0&&(n=""+o.key),o.ref!==void 0&&(s=o.ref);for(i in o)K.call(o,i)&&!J.hasOwnProperty(i)&&(e[i]=o[i]);if(r&&r.defaultProps)for(i in o=r.defaultProps,o)e[i]===void 0&&(e[i]=o[i]);return{$$typeof:M,type:r,key:n,ref:s,props:e,_owner:U.current}}C.Fragment=W;C.jsx=k;C.jsxs=k;v.exports=C;var F=v.exports,P={},q=H;P.createRoot=q.createRoot,P.hydrateRoot=q.hydrateRoot;const l=new(window.AudioContext||window.webkitAudioContext);function Q(){const r=l.sampleRate*.05,o=l.createBuffer(1,r,l.sampleRate),t=o.getChannelData(0);for(let d=0;d<r;d++)t[d]=Math.random()*2-1;const i=l.createBufferSource();i.buffer=o;const e=l.createBiquadFilter();e.type="highpass",e.frequency.setValueAtTime(8e3,l.currentTime),e.Q.setValueAtTime(1,l.currentTime);const n=l.createGain();n.gain.setValueAtTime(1,l.currentTime),n.gain.exponentialRampToValueAtTime(.001,l.currentTime+.05),i.connect(e),e.connect(n),n.connect(l.destination),i.start(),i.stop(l.currentTime+.05);const s=l.createOscillator();s.type="square",s.frequency.setValueAtTime(1e4,l.currentTime);const a=l.createGain();a.gain.setValueAtTime(.1,l.currentTime),a.gain.exponentialRampToValueAtTime(.001,l.currentTime+.03),s.connect(a),a.connect(l.destination),s.start(),s.stop(l.currentTime+.03)}const u=new(window.AudioContext||window.webkitAudioContext);function Y(){const r=u.sampleRate*.2,o=u.createBuffer(1,r,u.sampleRate),t=o.getChannelData(0);for(let d=0;d<r;d++)t[d]=Math.random()*2-1;const i=u.createBufferSource();i.buffer=o;const e=u.createBiquadFilter();e.type="highpass",e.frequency.setValueAtTime(1e3,u.currentTime);const n=u.createGain();n.gain.setValueAtTime(1,u.currentTime),n.gain.exponentialRampToValueAtTime(.01,u.currentTime+.2),i.connect(e),e.connect(n),n.connect(u.destination),i.start(),i.stop(u.currentTime+.2);const s=u.createOscillator();s.type="sine",s.frequency.setValueAtTime(150,u.currentTime);const a=u.createGain();a.gain.setValueAtTime(.7,u.currentTime),a.gain.exponentialRampToValueAtTime(.01,u.currentTime+.1),s.connect(a),a.connect(u.destination),s.start(),s.stop(u.currentTime+.1)}const f=new(window.AudioContext||window.webkitAudioContext);function Z(){const r=f.createOscillator();r.type="sine";const o=f.createGain();r.frequency.setValueAtTime(150,f.currentTime),r.frequency.exponentialRampToValueAtTime(60,f.currentTime+.1),o.gain.setValueAtTime(1,f.currentTime),o.gain.exponentialRampToValueAtTime(.001,f.currentTime+.5),r.connect(o),o.connect(f.destination),r.start(),r.stop(f.currentTime+.5)}const c=new(window.AudioContext||window.webkitAudioContext);function X(){const r=c.sampleRate*1.5,o=c.createBuffer(1,r,c.sampleRate),t=o.getChannelData(0);for(let h=0;h<r;h++)t[h]=Math.random()*2-1;const i=c.createBufferSource();i.buffer=o;const e=c.createBiquadFilter();e.type="highpass",e.frequency.setValueAtTime(4e3,c.currentTime);const n=c.createBiquadFilter();n.type="lowpass",n.frequency.setValueAtTime(12e3,c.currentTime);const s=c.createGain();s.gain.setValueAtTime(1,c.currentTime),s.gain.exponentialRampToValueAtTime(.001,c.currentTime+1.5),i.connect(e),e.connect(n),n.connect(s),s.connect(c.destination),i.start(),i.stop(c.currentTime+1.5);const a=c.createOscillator();a.type="triangle",a.frequency.setValueAtTime(1e4,c.currentTime);const d=c.createGain();d.gain.setValueAtTime(.05,c.currentTime),d.gain.exponentialRampToValueAtTime(.001,c.currentTime+1.5),a.connect(d),d.connect(c.destination),a.start(),a.stop(c.currentTime+1.5)}const w=r=>A.Display.Color.HexStringToColor(r).color,p=new(window.AudioContext||window.webkitAudioContext);function ee(){const r=p.sampleRate*.5,o=p.createBuffer(1,r,p.sampleRate),t=o.getChannelData(0);for(let a=0;a<r;a++)t[a]=Math.random()*2-1;const i=p.createBufferSource();i.buffer=o;const e=p.createBiquadFilter();e.type="highpass",e.frequency.setValueAtTime(5e3,p.currentTime);const n=p.createBiquadFilter();n.type="lowpass",n.frequency.setValueAtTime(1e4,p.currentTime);const s=p.createGain();s.gain.setValueAtTime(.6,p.currentTime),s.gain.exponentialRampToValueAtTime(.001,p.currentTime+.5),i.connect(e),e.connect(n),n.connect(s),s.connect(p.destination),i.start(),i.stop(p.currentTime+.5)}const m=new(window.AudioContext||window.webkitAudioContext);function te(){const r=m.sampleRate*1.2,o=m.createBuffer(1,r,m.sampleRate),t=o.getChannelData(0);for(let a=0;a<r;a++)t[a]=Math.random()*2-1;const i=m.createBufferSource();i.buffer=o;const e=m.createBiquadFilter();e.type="highpass",e.frequency.setValueAtTime(3e3,m.currentTime);const n=m.createBiquadFilter();n.type="lowpass",n.frequency.setValueAtTime(9e3,m.currentTime);const s=m.createGain();s.gain.setValueAtTime(.8,m.currentTime),s.gain.exponentialRampToValueAtTime(.001,m.currentTime+1.2),i.connect(e),e.connect(n),n.connect(s),s.connect(m.destination),i.start(),i.stop(m.currentTime+1.2)}const T=new(window.AudioContext||window.webkitAudioContext);function z(r=99,o=500){const t=T.createOscillator();t.type="sine",t.frequency.setValueAtTime(r,T.currentTime);const i=T.createGain();i.gain.setValueAtTime(1,T.currentTime),i.gain.exponentialRampToValueAtTime(.001,T.currentTime+.5),t.detune.setValueAtTime(-5,T.currentTime),t.connect(i),i.connect(T.destination),t.start(),t.stop(T.currentTime+o/1e3)}function ne(){z(120,400)}let V=!1,B=0,x=[],y=0,S=null;function oe(){V=!0,B=Date.now(),x=[],console.log("Recording started")}function R(){V=!1,x.push({instrument:null,time:Date.now()-B}),console.log("Recording stopped")}function ie(){const r=()=>{y>=x.length&&(y=0);const{instrument:o,time:t}=x[y],i=y===0?0:x[y-1].time;S=setTimeout(()=>{console.log(`Playing ${o} after ${t}ms`),o&&D(o),y++,r()},t-i)};console.log("Loop play starting"),r()}function re(){S&&clearTimeout(S),console.log("Loop stopped")}const se={hihat:Q,kick:Z,snare:Y,crash:X,"hihat-open":ee,ride:te,"tom-low":z,"tom-high":ne},D=r=>{if(console.log(`Playing ${r}`),se[r](),V){const o=Date.now()-B;x.push({instrument:r,time:o}),console.log(`Recording ${r} at time ${o}ms`)}},ae={hihat:"#FDA341",kick:"#F24E1E",snare:"#4A90E2",crash:"#A0D8C5","hihat-open":"#F9F871",ride:"#F5C542","tom-low":"#FF7F50","tom-high":"#9B59B6"},E={idle:"#FFF",readyToRecord:"#0FF",recording:"#FD0041",playing:"#0F0"};class ce extends A.Scene{constructor(){super(...arguments);b(this,"controls")}create(){this.createPads(),this.createControlButtons()}createPads(){const t=[this.createPad("crash"),this.createPad("ride"),this.createPad("hihat-open"),this.createPad("hihat"),this.createPad("snare"),this.createPad("tom-low"),this.createPad("tom-high"),this.createPad("kick")];t.forEach(({button:e,instrument:n})=>e.setInteractive().setOrigin(0,0).on("pointerdown",()=>{e.setAlpha(.7),this.controls.state==="readyToRecord"&&(this.controls.state="recording",this.updateControlsText(),oe()),D(n)}).on("pointerup",()=>e.setAlpha(1)).on("pointerout",()=>e.setAlpha(1)));const i=()=>{const e=window.innerWidth/4,n=window.innerHeight/2;t.forEach(({button:s},a)=>{const d=a%4*e,h=Math.floor(a/4)*n;s.setSize(e,n).setPosition(d,h)})};window.addEventListener("resize",i),i()}createPad(t){return{instrument:t,button:this.add.rectangle().setFillStyle(w(ae[t])).setStrokeStyle(2,w("#FFF"),.8)}}createButton(){const t=this.add.rectangle().setFillStyle(w("#000")).setStrokeStyle(2,w("#FFF"),.8).setOrigin(0,0);return t.setInteractive().on("pointerdown",()=>t.setFillStyle(w("#666"))).on("pointerup",()=>t.setFillStyle(w("#000"))),t}createText(t){return this.add.text(0,0,t).setOrigin(.5,.5).setFontSize(20).setFontFamily("Arial").setAlign("center").setColor("#FFF").setData("initial",t)}createControlButtons(){this.controls={state:"idle",stop:{button:this.createButton(),text:this.createText("Stop")},record:{button:this.createButton(),text:this.createText("Record")},play:{button:this.createButton(),text:this.createText("Play")}};const{record:t,stop:i,play:e}=this.controls;t.button.setInteractive().on("pointerdown",()=>{this.controls.state==="idle"||this.controls.state==="playing"?(this.controls.state="readyToRecord",t.text.setText("Hit a pad to start")):this.controls.state==="readyToRecord"?(this.controls.state="idle",t.text.setText(t.text.getData("initial"))):this.controls.state==="recording"&&(this.controls.state="idle",R()),this.updateControlsText()}),i.button.setInteractive().on("pointerdown",()=>{this.controls.state==="recording"&&R(),this.controls.state==="playing"&&re(),this.controls.state="idle",this.updateControlsText()}),e.button.setInteractive().on("pointerdown",()=>{this.controls.state==="recording"&&R(),this.controls.state="playing",ie(),this.updateControlsText()});const n=()=>{const s=window.innerWidth,a=window.innerHeight,d=Math.max(a,s)/15,h=s/3;[i,t,e].forEach(({button:g,text:G},_)=>{g.setSize(h,d).setPosition(h*_,-1),G.setFontSize(d/3).setWordWrapWidth(g.width,!0).setSize(g.width,g.height).setPosition(g.getCenter().x,g.getCenter().y)})};window.addEventListener("resize",n),n()}updateControlsText(){const{record:{text:t},stop:{text:i},play:{text:e}}=this.controls;[t,i,e].forEach(s=>s.setText(s.getData("initial")).setColor(E.idle));const n=E[this.controls.state];switch(this.controls.state){case"idle":break;case"readyToRecord":t.setText("Hit a pad to start").setColor(n);break;case"recording":t.setText("Recording...").setColor(n);break;case"playing":e.setText("Playing...").setColor(n);break}}}function le(r){const o=window.innerWidth,t=window.innerHeight;r.scale.resize(o,t),r.scene.scenes.forEach(i=>{var e,n;return(n=(e=i.sys)==null?void 0:e.scale)==null?void 0:n.refresh()})}let O=!1;const ue=()=>{if(!O){O=!0;const r=new A.Game({type:A.AUTO,mode:A.Scale.RESIZE,parent:"phaser-container",width:window.innerWidth,height:window.innerHeight,backgroundColor:"#FFF",scene:[ce],input:{activePointers:4}});window.addEventListener("resize",()=>{le(r)})}return F.jsx(F.Fragment,{})};function de(){return F.jsx(ue,{})}P.createRoot(document.getElementById("root")).render(F.jsx(N.StrictMode,{children:F.jsx(de,{})}));
